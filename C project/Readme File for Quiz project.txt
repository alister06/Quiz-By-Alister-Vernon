The program is a simple quiz game written in C that allows users to answer questions, save their scores, and view previous scores. Let’s break down the code step by step to help you understand how it works.

1. Including Libraries


#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

stdio.h: This is the standard input-output library that allows us to use functions like printf, scanf, fgets, etc.
string.h: This library helps with string manipulation, like comparing or modifying strings.
stdlib.h: This provides functions like rand() for generating random numbers and srand() for seeding (starting) the random number generator.
time.h: This allows us to work with time functions, which we'll use to seed the random number generator using the current time.

2. Defining Constants


#define FILENAME "quiz_scores.txt"
#define TOTAL_QUESTIONS 20
#define QUESTIONS_TO_ASK 10
FILENAME is the name of the file where quiz scores will be saved.
TOTAL_QUESTIONS is the total number of questions available in the quiz.
QUESTIONS_TO_ASK is the number of questions that will be asked in each round of the quiz.

3. Defining Structures

A structure is used to group variables of different types under a single name.


struct User {
    char name[50];
    int score;
};
struct User stores the user's name and score. name is a string (array of characters), and score is an integer.
c
Copy code
struct Question {
    char question[256];
    char options[4][50];
    int correctAnswer;
};
struct Question stores a question, the possible options (4 choices), and the correct answer.
question holds the actual question.
options[4][50] is a 2D array that holds 4 answer options.
correctAnswer is an integer that stores the index of the correct option (1 to 4).

4. Shuffling Questions


void shuffle(int arr[], int n) {
    srand(time(0));  
    for (int i = n - 1; i > 0; i--) {
        int j = rand() % (i + 1);  
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
This function takes an array arr[] and shuffles its elements. This is done using the rand() function to randomize the order of the questions.
srand(time(0)) ensures the random numbers generated by rand() are different each time the program runs by seeding it with the current time.

5. Conducting the Quiz


int conductQuiz(struct Question questions[], int numQuestions) {
    int score = 0;
    int answer;
    int indices[numQuestions];

    for (int i = 0; i < numQuestions; i++) {
        indices[i] = i;
    }

    shuffle(indices, numQuestions);

    for (int i = 0; i < QUESTIONS_TO_ASK; i++) {
        int questionIndex = indices[i];

        printf("\n%s\n", questions[questionIndex].question);
        for (int j = 0; j < 4; j++) {
            printf("%d. %s\n", j + 1, questions[questionIndex].options[j]);
        }
        printf("Enter your answer (or 0 to exit): ");
        scanf("%d", &answer);

        if (answer == 0) {
            printf("Exiting the quiz. Your current score: %d\n", score);
            return score;
        }

        if (answer < 1 || answer > 4) {
            printf("Invalid option. Please select a number between 1 and 4.\n");
            i--; 
            continue;
        }

        if (answer == questions[questionIndex].correctAnswer) {
            score++;
        }
    }

    return score;
}
conductQuiz() asks a set of random questions and records the score.
The function shuffles the question indices so that questions appear in a random order.
It prints each question and its options, waits for the user to input their answer, and checks if the answer is correct.
If the user answers correctly, their score increases. If they input 0, they exit the quiz early, and the function returns their current score.

6. Saving the Score


void saveScore(struct User user) {
    FILE *file = fopen(FILENAME, "a");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }
    fprintf(file, "%s\t%d\n", user.name, user.score);
    fclose(file);
}
This function opens the quiz_scores.txt file in "append" mode (adding new data without deleting existing data).
It saves the user’s name and score to the file.
The file is closed once the data is written.

7. Displaying Previous Scores


void displayPreviousScores(char name[]) {
    FILE *file = fopen(FILENAME, "r");
    if (file == NULL) {
        printf("No previous scores found.\n");
        return;
    }

    char storedName[50];
    int storedScore;
    int found = 0;

    printf("\nPrevious scores for %s:\n", name);

    while (fscanf(file, "%49[^\t]\t%d\n", storedName, &storedScore) != EOF) {
        if (strcmp(storedName, name) == 0) {
            printf("Score: %d\n", storedScore);
            found = 1;
        }
    }

    if (!found) {
        printf("No previous scores found for this user.\n");
    }

    fclose(file);
}
This function reads the quiz_scores.txt file and displays any previous scores for the entered name.
It compares each saved name with the one entered by the user, and if a match is found, it displays the corresponding score.

8. Main Menu


int main() {
    struct User user;
    int choice;

    struct Question questions[TOTAL_QUESTIONS] = {
        // Questions go here...
    };

    do {
        printf("\n--- Quiz Menu ---\n");
        printf("1. Start Quiz\n");
        printf("2. Show Previous Scores\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar();

        switch (choice) {
            case 1:
                printf("Enter your name: ");
                fgets(user.name, 50, stdin);
                user.name[strcspn(user.name, "\n")] = 0;

                user.score = conductQuiz(questions, TOTAL_QUESTIONS);

                printf("\nUser: %s\n", user.name);
                printf("Your score: %d/%d\n", user.score, QUESTIONS_TO_ASK);

                saveScore(user);
                break;

            case 2:
                printf("Enter your name to view previous scores: ");
                fgets(user.name, 50, stdin);
                user.name[strcspn(user.name, "\n")] = 0;

                displayPreviousScores(user.name);
                break;

            case 3:
                printf("Exiting the program.\nThank you for playing the quiz.\n");
                break;

            default:
                printf("Invalid choice. Please select a valid option.\n");
                break;
        }
    } while (choice != 3);

    return 0;
}

This is the main part of the program where users interact with a menu to start the quiz, view their previous scores, or exit.
Each time the user chooses "Start Quiz", they are asked to enter their name, and the quiz starts.
When the quiz finishes, the user's score is saved, and they can view their previous scores by entering their name again in the "Show Previous Scores" option.


Summary:
The program lets users take a quiz, with questions presented randomly each time.
Users can view their past scores or exit the program.
Scores are saved to a file, allowing the quiz to track user performance across multiple attempts.


